generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/minuto_com_deus/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  
  // Assinatura Pro
  isProMember          Boolean  @default(false)
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique
  stripePriceId        String?
  stripeCurrentPeriodEnd DateTime?
  
  // Gamificação - Streak
  currentStreak        Int      @default(0)
  longestStreak        Int      @default(0)
  lastActivityDate     DateTime?
  totalDevocionais     Int      @default(0)
  
  accounts      Account[]
  sessions      Session[]
  
  chapterMetrics ChapterMetric[]
  highlights     Highlight[]
  notes          Note[]
  favorites      Favorite[]
  journals       Journal[]
  userPreference UserPreference?
  

}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// App-Specific Models
model ChapterMetric {
  id             String   @id @default(cuid())
  userId         String
  book           String
  chapter        Int
  accessCount    Int      @default(1)
  lastAccessedAt DateTime @default(now())
  createdAt      DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, book, chapter])
  @@index([userId])
}

model Highlight {
  id              String   @id @default(cuid())
  userId          String
  book            String
  chapter         Int
  verseNumber     Int
  highlightedText String   @db.Text
  color           String   // amarelo, verde, azul, rosa
  createdAt       DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, book, chapter])
}

model Note {
  id          String   @id @default(cuid())
  userId      String
  book        String
  chapter     Int
  verseNumber Int
  noteText    String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, book, chapter])
}

model Favorite {
  id          String   @id @default(cuid())
  userId      String
  book        String
  chapter     Int
  verseNumber Int
  createdAt   DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, book, chapter, verseNumber])
  @@index([userId])
}

model Journal {
  id              String   @id @default(cuid())
  userId          String
  sessionDate     DateTime @default(now())
  gratidao        String?  @db.Text
  insight         String?  @db.Text
  humor           Int      // 1-5
  duracaoMinutos  Int      // 10 ou 15
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([userId, sessionDate])
}

model UserPreference {
  id                     String   @id @default(cuid())
  userId                 String   @unique
  preferenciaOnboarding  Json?    // Armazena respostas do quiz
  ansiedadeNivel         String?
  financasPreocupacao    String?
  outrosTopicos          Json?
  onboardingCompleted    Boolean  @default(false)
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// ===== MÓDULO V: CHATBOT TEOLÓGICO RAG & IA =====

// Controle de Uso Mensal do Chat (para usuários gratuitos)
model ChatUsage {
  id            String   @id @default(cuid())
  userId        String
  month         Int      // Mês (1-12)
  year          Int      // Ano (2025, 2026...)
  questionsUsed Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@unique([userId, month, year])
  @@index([userId])
  @@index([month, year])
}

// Histórico de Conversas com o Chatbot
model ChatConversation {
  id        String   @id @default(cuid())
  userId    String
  title     String?  // Título auto-gerado ou definido pelo usuário
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  messages ChatMessage[]
  
  @@index([userId])
  @@index([createdAt])
}

// Mensagens do Chat
model ChatMessage {
  id             String   @id @default(cuid())
  conversationId String
  role           String   // 'user' ou 'assistant'
  content        String   @db.Text
  context        Json?    // Passagens bíblicas usadas como contexto
  createdAt      DateTime @default(now())
  
  conversation ChatConversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
  @@index([createdAt])
}

// REFLEXÕES DIÁRIAS REMOVIDO - Simplificação do app para foco no core
// SIGNIFICADO ORIGINAL (Grego/Hebraico) REMOVIDO - Feature muito avançada

// ===== DEVOCIONAL GUIADO =====

// Conteúdo dos devocionais (preparado pela equipe)
model Devo {
  id             String   @id @default(cuid())
  day            Int      @unique // Dia do plano (1-365)
  title          String   // Ex.: "Paz no Caos"
  verseRef       String   // Ex.: "Filipenses 4:6-7"
  verseText      String   @db.Text
  contextLine    String   // Frase curta de contexto
  audioUrlPalavra String? // URL do áudio para etapa "Palavra"
  audioUrlOracao  String? // URL do áudio para etapa "Oração"
  lengthSec      Int      @default(600) // Duração base do devocional
  createdAt      DateTime @default(now())
  
  @@index([day])
}

// Sessões de devocional completadas pelos usuários
model DevotionalSession {
  id              String   @id @default(cuid())
  userId          String
  devoDay         Int      // Dia do devocional completado
  date            DateTime @default(now())
  durationSec     Int      // Duração real da sessão
  completedSteps  Json     // ["respira", "palavra", "oracao", "acao"]
  eyesClosedMode  Boolean  @default(false)
  hadFallback     Boolean  @default(false) // Timer fallback foi usado?
  createdAt       DateTime @default(now())
  
  @@index([userId])
  @@index([userId, date])
}

// Diário do devocional (pós-ritual)
model DevotionalJournal {
  id          String   @id @default(cuid())
  userId      String
  sessionDate DateTime @default(now())
  gratitude   String?  @db.Text // Gratidão
  insight     String?  @db.Text // Insight
  answered    Boolean  @default(false) // Pedido respondido hoje?
  createdAt   DateTime @default(now())
  
  @@index([userId])
  @@index([userId, sessionDate])
}

// Preferências de devocional do usuário
model DevotionalPreference {
  id                String   @id @default(cuid())
  userId            String   @unique
  ritualMinutes     Int      @default(10) // 5, 10 ou 15
  reminderTime      String?  // Ex.: "08:00"
  reminderEnabled   Boolean  @default(true)
  voiceGuidance     Boolean  @default(true)
  hapticsEnabled    Boolean  @default(true)
  ambienceVolume    Float    @default(0.3) // 0.0 a 1.0
  lastCompletedDay  Int      @default(0)   // Último dia completado
  streakDays        Int      @default(0)   // Dias em sequência
  peaceDays         Int      @default(0)   // Dias de Paz
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  @@index([userId])
}
